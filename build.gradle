apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceCompatibility = 1.8
version = '0.1alpha'

mainClassName = "drumseq.DrumSeq"
sourceSets {
    main {
        java {
            srcDir 'src/drumseq'
        }
        resources {
            srcDir 'src/data'
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://clojars.org/repo" }
    ivy {
        url "http://beadsproject.net/downloads/"
	layout 'pattern', {
	    artifact "[module].[ext]"
	}
    }
    flatDir {
        dirs libsDir
    }
}

configurations {
    beads
    jogl
    gluegen
}

dependencies {
    beads group: 'net.beadsproject', name: 'Beads_Processing', ext: 'zip'
    jogl 'org.jogamp.jogl:jogl-all:2.3.1',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-android-aarch64',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-android-armv6',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-linux-amd64',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-linux-armv6',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-linux-armv6',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-linux-armv6hf',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-linux-i586',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-macosx-universal',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-solaris-amd64',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-solaris-i586',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-windows-amd64',
          'org.jogamp.jogl:jogl-all:2.3.1:natives-windows-i586'
          
    gluegen 'org.jogamp.gluegen:gluegen-rt:2.3.1',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-android-aarch64',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-android-armv6',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-amd64',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-armv6',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-armv6hf',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-linux-i586',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-macosx-universal',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-solaris-amd64',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-solaris-i586',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-windows-amd64',
             'org.jogamp.gluegen:gluegen-rt:2.3.1:natives-windows-i586'
             
    compile 'org.processing:core:3.0a10'
    compile('controlp5:controlp5:2.2.4-SNAPSHOT') {
        transitive = false
    }
    compile fileTree(dir: libsDir, include: ['*.jar'])
}

//TODO should be changed to use gradle convention, using ant's resolve requires an internet connection
task extractBeads(type: Copy) {
    String s = configurations.beads.resolve()
    s = s.replaceAll(~/[\[\]]/, "")
     
    ant.unzip(src: s, dest:libsDir, overwrite:"true") {
        patternset() {
	    include( name: 'beads_processing/beads/library/*.jar' )
	}
	mapper(type:"flatten")
    }
}

task joglFatJar(type: Jar) {
    //configurations.jogl.allArtifacts.getFiles.each { art ->
    configurations.jogl.resolvedConfiguration.resolvedArtifacts.each { art ->
        from({ zipTree(art.getFile())}) {
            include '**/*.so'
            include '**/*.dll'
            include '**/*.jnilib'
            include 'jogamp/**/*'
            include 'jogl/**/*'
            include 'com/**/*'
            include 'newt/**/*'
            include 'META-INF/**/*'
          
            eachFile { FileCopyDetails fcp ->
                if (fcp.file.getName().matches(/.*\.(so|jnilib|dll)/)) {
                    // remap the file
                    String path = art.classifier.substring(8)
                    String file = fcp.relativePath.segments[-1]
                    fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), "natives/$path/$file")
                }
            }
        }
        if (art.classifier.equals(null)) {
            println("grabbing manifest")
            project.ext.set("joglManif", zipTree(art.getFile()).matching {
                include 'META-INF/**/*'
                            }.getSingleFile())
        }
    }
    baseName = 'jogl-all'
    version = '2.3.1'
    classifier = 'fat'
    destinationDir = file("$buildDir/tmp")
}

task joglJar(type: Jar, dependsOn: "joglFatJar") {
    description 'Adds the correct manfiest to the jogl fat jar.'
    from zipTree(joglFatJar.archivePath) // add original content
    baseName = 'jogl-all'
    version = '2.3.1'
    classifier = 'fat'
    destinationDir = libsDir
    manifest {
        from(file(project.joglManif))
    }
}

task gluegenFatJar(type: Jar) {
    //configurations.jogl.allArtifacts.getFiles.each { art ->
    configurations.gluegen.resolvedConfiguration.resolvedArtifacts.each { art ->
        //could also use rename see: http://mrhaki.blogspot.ie/2010/10/gradle-goodness-renaming-files-while.html
        from({ zipTree(art.getFile())}) {
            include '**/*.so'
            include '**/*.dll'
            include '**/*.jnilib'
            include 'jogamp/**/*'
            include 'gluegen/**/*'
            include 'com/**/*'
            include 'META-INF/**/*'
          
            eachFile { FileCopyDetails fcp ->
                if (fcp.file.getName().matches(/.*\.(so|jnilib|dll)/)) {
                    // remap the file
                    String path = art.classifier.substring(8)
                    String file = fcp.relativePath.segments[-1]
                    fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), "natives/$path/$file")
                }
            }
            if (art.classifier.equals(null)) {
                println("grabbing manifest")
                project.ext.set("gluegenManif", zipTree(art.getFile()).matching {
                    include 'META-INF/**/*'
                }.getSingleFile())
            }
        }
    }
    baseName = 'gluegen-rt'
    version = '2.3.1'
    classifier = 'fat'
    destinationDir = file("$buildDir/tmp")
}

task gluegenJar(type: Jar, dependsOn: "gluegenFatJar") {
    description 'Adds the correct manfiest to the gluegen fat jar.'
    from zipTree(gluegenFatJar.archivePath) // add original content
    baseName = 'gluegen-rt'
    version = '2.3.1'
    classifier = 'fat'
    destinationDir = libsDir
    manifest {
        from(file(project.gluegenManif))
    }
}

task wrapper(type: Wrapper) {
     scriptFile = 'DrumSeq'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
